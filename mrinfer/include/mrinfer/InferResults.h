// Generated by gencpp from file mrinfer/InferResults.msg
// DO NOT EDIT!


#ifndef MRINFER_MESSAGE_INFERRESULTS_H
#define MRINFER_MESSAGE_INFERRESULTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrinfer
{
template <class ContainerAllocator>
struct InferResults_
{
  typedef InferResults_<ContainerAllocator> Type;

  InferResults_()
    : classLabel(0)
    , classProb(0.0)
    , xMin(0.0)
    , yMin(0.0)
    , xMax(0.0)
    , yMax(0.0)  {
    }
  InferResults_(const ContainerAllocator& _alloc)
    : classLabel(0)
    , classProb(0.0)
    , xMin(0.0)
    , yMin(0.0)
    , xMax(0.0)
    , yMax(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _classLabel_type;
  _classLabel_type classLabel;

   typedef float _classProb_type;
  _classProb_type classProb;

   typedef float _xMin_type;
  _xMin_type xMin;

   typedef float _yMin_type;
  _yMin_type yMin;

   typedef float _xMax_type;
  _xMax_type xMax;

   typedef float _yMax_type;
  _yMax_type yMax;





  typedef boost::shared_ptr< ::mrinfer::InferResults_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrinfer::InferResults_<ContainerAllocator> const> ConstPtr;

}; // struct InferResults_

typedef ::mrinfer::InferResults_<std::allocator<void> > InferResults;

typedef boost::shared_ptr< ::mrinfer::InferResults > InferResultsPtr;
typedef boost::shared_ptr< ::mrinfer::InferResults const> InferResultsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrinfer::InferResults_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrinfer::InferResults_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mrinfer

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': True, 'HasHeader': False}
// {'mrinfer': ['/home/mrzamboni/catkin_ws/src/mrinfer/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::mrinfer::InferResults_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrinfer::InferResults_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrinfer::InferResults_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrinfer::InferResults_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrinfer::InferResults_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrinfer::InferResults_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrinfer::InferResults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1135a834c1577618b60cb2ddd0fff748";
  }

  static const char* value(const ::mrinfer::InferResults_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1135a834c1577618ULL;
  static const uint64_t static_value2 = 0xb60cb2ddd0fff748ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrinfer::InferResults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrinfer/InferResults";
  }

  static const char* value(const ::mrinfer::InferResults_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrinfer::InferResults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 classLabel\n"
"float32 classProb\n"
"float32 xMin\n"
"float32 yMin\n"
"float32 xMax\n"
"float32 yMax\n"
;
  }

  static const char* value(const ::mrinfer::InferResults_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrinfer::InferResults_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.classLabel);
      stream.next(m.classProb);
      stream.next(m.xMin);
      stream.next(m.yMin);
      stream.next(m.xMax);
      stream.next(m.yMax);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InferResults_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrinfer::InferResults_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrinfer::InferResults_<ContainerAllocator>& v)
  {
    s << indent << "classLabel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.classLabel);
    s << indent << "classProb: ";
    Printer<float>::stream(s, indent + "  ", v.classProb);
    s << indent << "xMin: ";
    Printer<float>::stream(s, indent + "  ", v.xMin);
    s << indent << "yMin: ";
    Printer<float>::stream(s, indent + "  ", v.yMin);
    s << indent << "xMax: ";
    Printer<float>::stream(s, indent + "  ", v.xMax);
    s << indent << "yMax: ";
    Printer<float>::stream(s, indent + "  ", v.yMax);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRINFER_MESSAGE_INFERRESULTS_H
